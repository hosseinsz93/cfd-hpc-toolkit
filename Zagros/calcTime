#!/usr/bin/python

# C:\Program Files\Python27\pythonw.exe

# /cygdrive/c/'Program Files'/Python27/pythonw.exe  -->  Don't work
# /bin/python2.7.exe

DEBUG = False
# DEBUG = True

import os
import re
import subprocess
import sys
import tempfile


def calcTime(filename, totsteps):
    if DEBUG:
        import pdb
        pdb.set_trace()


    refloat =   r'([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)'

    # 10(momentum) 6.81e+01(s) 5.441188e-10
    remoment =  re.compile(r'^([0-9]+)\(momentum\) +' + refloat + r'\(s\) +' + refloat)

    # 10(poisson)  6.35e+01(s) Maxdiv=8.08e-05
    repoisson = re.compile(r'^([0-9]+)\(poisson\) +' + refloat + r'\(s\) +Maxdiv=' + refloat)

    # 1(Concentration eqn.) 2.80e+02(s)
    reconc1 =   re.compile(r'^([0-9]+)\(Concentration eqn\.\) +' + refloat + r'\(s\)')

    # 10(Convection-Diffusion) 4.26e+01(s)
    reconc2 =   re.compile(r'^([0-9]+)\(Convection-Diffusion\) +' + refloat + r'\(s\)')

    # 1(total)    4.54e+02(s)
    retotal =   re.compile(r'^([0-9]+)\(total\) +' + refloat + r'\(s\)')

    dataDict = { }

    # Read data and only save most recent iteration data.
    try:
        currIter = -1
        currTime = 0.0
        with open(filename) as f:
            for line in f:
                sr = remoment.search(line)
                if sr:
                    currIter, currTime = isNewIter(sr, currIter, currTime, dataDict)
                    currTime += float(sr.group(2))
                    continue

                sr = repoisson.search(line)
                if sr:
                    currIter, currTime = isNewIter(sr, currIter, currTime, dataDict)
                    currTime += float(sr.group(2))
                    continue

                sr = reconc1.search(line)
                if sr:
                    currIter, currTime = isNewIter(sr, currIter, currTime, dataDict)
                    currTime += float(sr.group(2))
                    continue

                sr = reconc2.search(line)
                if sr:
                    currIter, currTime = isNewIter(sr, currIter, currTime, dataDict)
                    currTime += float(sr.group(2))
                    continue

                sr = retotal.search(line)
                if sr:
                    currIter, currTime = isNewIter(sr, currIter, currTime, dataDict)
                    currTime = float(sr.group(2))
                    continue
        
        if currIter != -1:
            dataDict = addToDict(dataDict, currIter, currTime)

    # python2 code
    except IOError as e:
        if e[0] == 2:
            print('Could not open file {}.'.format(filename))
            exit(1)

        raise

    
    # python3 code
    # except FileNotFoundError:

    # Calculate the values needed to calculate time parameters.

    maxIter = 0
    totalTime = 0
    for i in sorted(dataDict.keys()):
        maxIter = i
        totalTime += dataDict[i]
        # searchResult = retotal.search(dataDict[i])
        # maxIter = int(searchResult.group(1))
        # totalTime += float(searchResult.group(2))


    # Output the results.
    frmstr = formatTime(totalTime)
    print 'Total time:  {} {}'.format(totalTime, frmstr)
    print 'Interations: {}'.format(maxIter)
    print 'Time/iter:   {}'.format(totalTime/maxIter)

    if totsteps > 0:
        remTime = (totsteps - maxIter) * totalTime / maxIter
        frmstr = formatTime((totsteps - maxIter) * totalTime / maxIter)
        print 'Remain time: {} {}'.format(remTime, frmstr)


# See if this record defines a new iteration. If so, put the current one
# in dataDict (unless currIter is -1) and set for new iter.
def isNewIter(sr, currIter, currTime, dataDict):
    iter = int(sr.group(1))
    if iter != currIter:
        if currIter != -1:
            dataDict = addToDict(dataDict, currIter, currTime)
        currIter = iter
        currTime = 0.0
    return currIter, currTime


# Addes entries to the dictionary.  The entries are in time sequence and repeat
# was CFD runs are rerun starting at points before the current maxKey.  These
# will overlap with previous entries so this routine will delete all the ones
# that come after.
def addToDict(dataDict, key, load):

    # If the key is already in the dictionay remove all entries from key down
    # to the end.
    if dataDict.get(key):
        for i in sorted(dataDict.keys()):
            if i > key:
                del dataDict[i]

    dataDict[key] = load
    return dataDict


def formatTime(time):
    frmstr = ''
    sec = time % 60
    tmp = int((time - sec) / 60)
    min = tmp % 60
    tmp = (tmp - min) / 60
    hrs = tmp % 24
    day = (tmp - hrs) / 24

    if day != 0:
        frmstr = '({:d}d{:02d}h{:02d}m{:02.2f}s)'.format(day, hrs, min, sec)
    elif hrs != 0:
        frmstr = '({:d}h{:02d}m{:02.2f}s)'.format(hrs, min, sec)
    else:
        frmstr = '({:d}m{:02.2f}s)'.format(min, sec)
    return frmstr

    
if __name__ == '__main__':
    reint   =   r'^[0-9]+$'
    reintc  =   re.compile(reint)

    if len(sys.argv) > 1:
        sr = reintc.search(sys.argv[1])
        if sr:
            calcTime('Converge_dU', int(sys.argv[1]))
        else:
            calcTime(sys.argv[1], 0)
    else:
        calcTime('Converge_dU', 0)

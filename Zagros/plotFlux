#!/usr/bin/python

# C:\Program Files\Python27\pythonw.exe

# /cygdrive/c/'Program Files'/Python27/pythonw.exe  -->  Don't work
# /bin/python2.7.exe

DEBUG = False
# DEBUG = True

import argparse
import re
import socket
import subprocess
import sys

progName = "plotFlux"

def plotFlux():

    if DEBUG:
        import pdb
        pdb.set_trace()


    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='Fluxin filename', nargs='?', default='fluxin.dat')
    parser.add_argument('-g', help='Generate data for gnuplot', action='store_true', default=False)
    parser.add_argument('-r', '--refresh', help='refresh time interval', default=30, type=int)
    parser.add_argument('-x', '--maxx', help='maximum x coordinate', default=None, type=float)
    parser.add_argument('-y', '--maxy', help='maximum y coordinate', default=None, type=float)
    args = parser.parse_args()
    # print args


    # Called from gnuplot to get the current time data.
    if (args.g):
        dataDict = readData(args.filename)
        outputDataDict(dataDict)
        return


    # Create a process to run gnuplot and stop when cntl-c is entered.
    # See if the file exists.
    try:
        with open(args.filename) as f:
            pass

    # python2 exception code
    except IOError as e:
        if e[0] == 2:
            print('Could not open file {}.'.format(args.filename))
            exit(1)

        raise

    # python3 exception code
    # except FileNotFoundError:


    # Run gnuplot
    try:
        if specHostname() == 'zagros':
            gnuplot = 'gnuplot'
        else:
            gnuplot = '/gpfs/software/gnuplot-5.2.8/bin/gnuplot'
        plotsp = subprocess.Popen([ gnuplot ], stdin=subprocess.PIPE)
        plotsp.stdin.write('set autoscale;\n')
        plotsp.stdin.write('set xtic auto;\n')
        plotsp.stdin.write('set ytic auto;\n')
        if args.maxx:
            plotsp.stdin.write('set xrange [0:{}];\n'.format(args.maxx))
        if args.maxy:
            plotsp.stdin.write('set yrange [0:{}];\n'.format(args.maxy))
        plotsp.stdin.write('set grid ytics lt 0 lw 1 lc rgb "#bbbbbb";\n')
        plotsp.stdin.write('set grid xtics lt 0 lw 1 lc rgb "#bbbbbb";\n')
        plotsp.stdin.write('set xlabel "Time Step";\n')
        plotsp.stdin.write('set ylabel "Fluxin";\n')
        plotsp.stdin.write('set title "Fluxin Values";\n')
        plotsp.stdin.write('set style data lines;\n')
        plotsp.stdin.write('while (1) {\n')
        plotsp.stdin.write(('    plot "<{} -g {}" using 1:2 title "Fluxin0" axis x1y1,'
                         +  '         ""          using 1:3 title "Fluxin1" axis x1y1;\n').format(progName, args.filename))
        plotsp.stdin.write('    pause {};\n'.format(args.refresh))
        # plotsp.stdin.write('    print "start refresh";\n')
        plotsp.stdin.write('}\n')
        plotsp.wait()

    except KeyboardInterrupt:
        plotsp.kill()
        return



# Read the flusin.dat file and make a table of times for each iteration.

refloat = r'([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)'
reflux = re.compile(r'^([0-9]+)[ \t]+' + refloat + r'[ \t]+' + refloat)

def readData(filename):

    dataDict = { }
    
    currIter = -1
        
    try:
        # print(filename)
        with open(filename) as f:
            for line in f:
                # print(line)
                searchResult = reflux.search(line)
                if (searchResult):
                    # print(searchResult.group(1), searchResult.group(2), searchResult.group(4))
                    iter = int(searchResult.group(1))
                    addToDict(dataDict, iter, [ float(searchResult.group(2)), float(searchResult.group(4)) ])

    # python2 exception code
    except IOError as e:
        if e[0] == 2:
            print('Could not open file {}.'.format(filename))
            exit(1)

        raise
    
    # python3 exception code
    # except FileNotFoundError:

    return dataDict

# end of readData


def outputDataDict(dataDict):
    for i in sorted(dataDict.keys()):
        # print(i, dataDict[i])
        print '{:d} {:g} {:g}'.format(i, dataDict[i][0], dataDict[i][1])

# end of outputDataDict



# Addes entries to the dictionary.  The entries are in time sequence and repeat
# was CFD runs are rerun starting at points before the current maxKey.  These
# will overlap with previous entries so this routine will delete all the ones
# that come after.
def addToDict(dataDict, key, load):

    # If the key is already in the dictionay remove all entries the rest down to
    # the end.
    if dataDict.get(key):
        for i in sorted(dataDict.keys()):
            if i > key:
                del dataDict[i]

    dataDict[key] = load
    # print('add', key, load)

    return dataDict



# Is this hostname supported?
def specHostname():
    host = socket.getfqdn()
    # print 'hostname is {}'.format(host)

    if host == 'zagros':
        return 'zagros'

    if re.search('\.cm\.cluster$', host):
        return 'seawulf'

    print 'This host, {}, is not yet supported.'
    exit(1)



if __name__ == '__main__':
    plotFlux()
